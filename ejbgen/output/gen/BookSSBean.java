// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
//
// BookSSBean.java

package gen;

import javax.ejb.SessionBean;
import javax.ejb.EJBException;
import java.util.*;
import javax.naming.InitialContext;
import javax.ejb.SessionContext;
import jutil.Database;
import jutil.RowCallback;
import java.sql.ResultSet;
import java.sql.SQLException;
import gen.*;

public class BookSSBean implements SessionBean {
  public static BookSSHome getHome(){
    try {
      InitialContext jndiContext = new InitialContext();
      Object ref =
        jndiContext.lookup("gen/BookSS");
      BookSSHome home = (BookSSHome)ref;
      return home;
    }catch (Exception e){
      throw new EJBException( "BookSSBean.getHome() failed: " + e.getMessage());
    }
  }

  // ===================================================================
  // SQL selects for each value object
  private static String selectBookWithNamesValue = "select Book.bookID, Book.title, Book.ISBN, Book.authorID, Book.publisherID, Book.status, Book.numCopies, Author.name, Author.penName, Publisher.name from Book, Author, Publisher where Book.authorID = Author.authorID and Book.publisherID = Publisher.publisherID ";
  private static String selectBookValue = "select Book.bookID, Book.title, Book.ISBN, Book.authorID, Book.publisherID, Book.status, Book.numCopies from Book ";

  // ===================================================================
  // SSB methods
  
  //--------------------------------------------------------------------
  public BookValue getBookValue(
    Integer bookID
    ) 
  {
    try {
      List params = new LinkedList();
      params.add(bookID);
  
      return 
       (BookValue)Database.firstRow(
         Database.runSql(
          selectBookValue
           + " where "
           + " Book.bookID = ? "
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookValue(rs);
            }
          }
          , params
       )
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getBookValue() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  /**
    * returns Collection of BookValue
    */
  public java.util.Collection getAllBookValue(
    ) 
  {
    try {
  
      return 
         Database.runSql(
          selectBookValue
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookValue(rs);
            }
          }
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getAllBookValue() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  public Integer add(
    BookValue value
    ) 
  {
    try {
      BookEntityHome entityHome = BookEntityBean.getHome(); 
      BookEntity entity = entityHome.create(
        value.getBookID()
        ,value.getTitle()
        ,value.getISBN()
        ,value.getAuthorID()
        ,value.getPublisherID()
        ,value.getStatus()
        ,value.getNumCopies()
      );
      return entity.getBookID();
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.add() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  public void update(
    BookValue value
    ) 
  {
    try {
      BookEntityHome entityHome = BookEntityBean.getHome(); 
      BookEntity entity = entityHome.findByPrimaryKey(
        value.getBookID());
      entity.setTitle(value.getTitle());
      entity.setISBN(value.getISBN());
      entity.setAuthorID(value.getAuthorID());
      entity.setPublisherID(value.getPublisherID());
      entity.setStatus(value.getStatus());
      entity.setNumCopies(value.getNumCopies());

    } catch (Exception e) {
      throw new EJBException( "BookSSBean.update() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  public void delete(
    Integer bookID
    ) 
  {
    try {
      BookEntityHome entityHome = BookEntityBean.getHome(); 
      entityHome.remove(bookID);
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.delete() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  public BookWithNamesValue getBookWithNamesValue(
    Integer bookID
    ) 
  {
    try {
      List params = new LinkedList();
      params.add(bookID);
  
      return 
       (BookWithNamesValue)Database.firstRow(
         Database.runSql(
          selectBookWithNamesValue
           + " and "
           + " Book.bookID = ? "
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookWithNamesValue(rs);
            }
          }
          , params
       )
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getBookWithNamesValue() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  /**
    * returns Collection of BookWithNamesValue
    */
  public java.util.Collection getAllBookWithNamesValue(
    ) 
  {
    try {
  
      return 
         Database.runSql(
          selectBookWithNamesValue
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookWithNamesValue(rs);
            }
          }
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getAllBookWithNamesValue() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  /**
    * returns Collection of BookWithNamesValue
    */
  public java.util.Collection getAllByTitle(
    String title
    ) 
  {
    try {
      List params = new LinkedList();
      params.add(title);
  
      return 
         Database.runSql(
          selectBookWithNamesValue
           + " and "
           + " Book.title = ?"
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookWithNamesValue(rs);
            }
          }
          , params
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getAllByTitle() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  /**
    * returns Collection of BookWithNamesValue
    */
  public java.util.Collection getAllByAuthorName(
    String authorName
    ) 
  {
    try {
      List params = new LinkedList();
      params.add(authorName);
  
      return 
         Database.runSql(
          selectBookWithNamesValue
           + " and "
           + " Author.name = ?"
            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new BookWithNamesValue(rs);
            }
          }
          , params
      );
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.getAllByAuthorName() failed: " + e.getMessage());
    }
  }
  
  //--------------------------------------------------------------------
  public void updateStatusByPublisher(
    Integer publisherID
    ,Integer newStatus
    ) 
  {
    try {

        
      BookEntityHome home = BookEntityBean.getHome();
      Collection coll = home.findAllByPublisherID(publisherID);
      for(Iterator i = coll.iterator(); i.hasNext(); ){
        BookEntity book = (BookEntity)i.next();
        book.setStatus(newStatus);
      }
    
    } catch (Exception e) {
      throw new EJBException( "BookSSBean.updateStatusByPublisher() failed: " + e.getMessage());
    }
  }

  public void ejbCreate() {} 
  public void ejbPostCreate() {} 
  public void ejbRemove() {} 
  public void ejbActivate() {} 
  public void ejbPassivate() {} 
  public void setSessionContext(SessionContext sc) {} 
}

//
// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
