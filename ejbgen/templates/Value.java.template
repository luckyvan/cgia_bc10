// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
//
// <%= $valueObj.name %>.java

package <%= $package %>;

import java.sql.ResultSet;
import java.sql.SQLException;

public class <%= $valueObj.name %> implements java.io.Serializable {
  // private member variables
<%
  $valueObj.columnsArray.each{ |column|
%>  private <%= column.javaType %> <%= column.name %>;
<%
  }
%>
  // empty constructor
  public <%= $valueObj.name %>(){
<%
  $valueObj.columnsArray.each{ |column|
%>    <%= column.name %> = null; 
<%
  }
%>  }

  // ResultSet constructor
  public <%= $valueObj.name %>(ResultSet rs) throws SQLException {
<%
  col = 1

  $valueObj.columnsArray.each{ |column|
    if column.javaType == JAVA_STRING
%>
    <%= column.name %> = rs.getString(<%= col %>);
<%
    elsif column.javaType == JAVA_INTEGER
%>
    if(rs.getObject(<%= col %>) != null)
      <%= column.name %> = new Integer(rs.getInt(<%= col %>));
    else
      <%= column.name %> = null;
<%
    else
      raise "invalid datatype [#{column.javaType}] for [#{column.name}]"
    end

    col = col + 1
  }
%>  }

  // member variable getters and setters
<%
  $valueObj.columnsArray.each{ |column|
%>  
  public <%= column.javaType %> get<%= column.upfirstName %>() { return <%= column.name %>; }
  public void set<%= column.upfirstName %>(<%= column.javaType %> <%= column.name %>){ this.<%= column.name %> = <%= column.name %>; }
<%
  }
%>}

//
// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
