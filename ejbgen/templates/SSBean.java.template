// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
//
// <%= $table.name %>SSBean.java

package <%= $package %>;

import javax.ejb.SessionBean;
import javax.ejb.EJBException;
import java.util.*;
import javax.naming.InitialContext;
import javax.ejb.SessionContext;
import jutil.Database;
import jutil.RowCallback;
import java.sql.ResultSet;
import java.sql.SQLException;
import <%= $package %>.*;

public class <%= $table.name %>SSBean implements SessionBean {
  public static <%= $table.name %>SSHome getHome(){
    try {
      InitialContext jndiContext = new InitialContext();
      Object ref =
        jndiContext.lookup("<%= $jndiPrefix %>/<%= $table.name %>SS");
      <%= $table.name %>SSHome home = (<%= $table.name %>SSHome)ref;
      return home;
    }catch (Exception e){
      throw new EJBException( "<%= $table.name %>SSBean.getHome() failed: " + e.getMessage());
    }
  }

  // ===================================================================
  // SQL selects for each value object
<%
  $table.valueObjs.values.each{ |valueObj|
%>  private static String select<%= valueObj.name %> = "select <%
    first = TRUE
    tables = {}

    valueObj.columnsArray.each{ |column|
%><% if !first %>, <% end %><%= column.table.name %>.<%= column.sqlName %><%
      first = FALSE
      tables[column.table.name] = 1
    }
%> from <%
    first = TRUE

    tables.keys.each{ |tableName|
%><% if !first %>, <% end %><%= tableName %><%
      first = FALSE
    }

    # modify below to use outer or ANSI joins
%><% if tables.size > 1 %> where <% end %><%
    first = TRUE

    valueObj.columnsArray.each{ |column|
      if column.references && tables[column.references.table.name]
%><% if !first %> and <% end %><%= column.table.name %>.<%= column.sqlName %> = <%= column.references.table.name %>.<%= column.references.name %><% 
        first = FALSE
      end
    }
%> ";
<%
  }
%>
  // ===================================================================
  // SSB methods
<%
  $table.fmethodsArray.each{ |fmethod|
    next if fmethod.ejbQL
%>  
  //--------------------------------------------------------------------
<%
    if fmethod.valueObj && fmethod.returnType == "java.util.Collection"
%>  /**
    * returns Collection of <%= fmethod.valueObj.name %>
    */
<%
    end
%>  public <%= fmethod.returnType %> <%= fmethod.name %>(
<%
    first = TRUE

    fmethod.params.each{ |param|
%>    <% if !first %>,<% end %><%= param.javaType %> <%= param.name %>
<%
      first = FALSE
    }
%>    ) 
  {
    try {
<%
    # look up entity home
    if fmethod.name == "add" || fmethod.name == "update" || 
       fmethod.name == "delete"
%>      <%= $table.name %>EntityHome entityHome = <%= $table.name %>EntityBean.getHome(); <%
    end

    #----------------------------------------------------------------
    if fmethod.name == "add"
%>
      <%= $table.name %>Entity entity = entityHome.create(
<%
      first = TRUE

      $table.columnsArray.each{ |column|
%>        <% if !first %>,<% end %>value.get<%= column.upfirstName %>()
<%
        first = FALSE
      }
%>      );
      return entity.get<%= $table.primaryKey.upfirstName %>();
<%
    #----------------------------------------------------------------
    elsif fmethod.name == "update"
%>
      <%= $table.name %>Entity entity = entityHome.findByPrimaryKey(
        value.get<%= $table.primaryKey.upfirstName %>());
<%
      $table.columnsArray.each{ |column|
        next if column.isPrimaryKey
%>      entity.set<%= column.upfirstName %>(value.get<%= column.upfirstName %>());
<%
      }
%>
<%
    #----------------------------------------------------------------
    elsif fmethod.name == "delete"
%>
      entityHome.remove(<%= $table.primaryKey.name %>);
<%
    #---------------------------------------------------------------- 
    elsif fmethod.valueObj  # need to generate a query
      if fmethod.params.size > 0
%>      List params = new LinkedList();
<%
        fmethod.params.each{ |param|
%>      params.add(<%= param.name %>);
<%
        }
      end
%>  
      return 
<%    
      if fmethod.returnType != "java.util.Collection" 
%>       (<%= fmethod.returnType %>)Database.firstRow(
<%   
       end 
%>         Database.runSql(
          select<%= fmethod.valueObj.name %>
<%
       if fmethod.where 
         if fmethod.valueObj.isExtended
%>           + " and "
<%
         else
%>           + " where "
<%
         end
       end
 
       if fmethod.where 
%>           + " <%= fmethod.where %>"
<%
       end
%>            ,new RowCallback(){
            public Object process(ResultSet rs) throws SQLException {
              return new <%= fmethod.valueObj.name %>(rs);
            }
          }
<%
       if fmethod.params.size > 0
%>          , params
<%
       end

       if fmethod.returnType != "java.util.Collection" 
%>       )
<% 
       end 
%>      );
<%
    #---------------------------------------------------------------- 
    else  # full custom method
%>
        <%= fmethod.body %>
<%
    end
%>    } catch (Exception e) {
      throw new EJBException( "<%= $table.name %>SSBean.<%= fmethod.name %>() failed: " + e.getMessage());
    }
  }
<%
  }
%>
  public void ejbCreate() {} 
  public void ejbPostCreate() {} 
  public void ejbRemove() {} 
  public void ejbActivate() {} 
  public void ejbPassivate() {} 
  public void setSessionContext(SessionContext sc) {} 
}

//
// ==================================================================
//
// WARNING : Do not edit this file by hand.  This file was created
// by ejbgen.  Edit the definition files and re-generate to make
// modifications.  Making modifications to this file directly will
// result in loss of work when the file is re-generated.
//
// ==================================================================
